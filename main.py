"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞
"""
import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

from config import BOT_TOKEN
from handlers import router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)


async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é"""
    commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="questions", description="‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
        BotCommand(command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å"),
    ]
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    dp.include_router(router)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
    await set_bot_commands(bot)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await bot.session.close()

#‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
#‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ª‚†õ‚†õ‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
#‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
#‚£ø‚£ø‚£è‚¢ª‚£ø‚£ø‚£ø‚£ø‚°Ä‚¢†‚£∂‚°Ü‚¢†‚£∂‚°Ñ‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
#‚£ø‚£ø‚£ø‚£¶‚†ª‚£ø‚£ø‚£ø‚£ã‚°à‚†â‚†°‚†é‚†â‚†Å‚£à‚£ø‚£ø‚£ø‚£ø‚†ã‚£º‚£ø‚£ø
#‚£ø‚£ø‚£ø‚£ø‚£¶‚†ô‚¢ø‚£ø‚£ø‚°è‚¢¶‚£Ä‚£Ä‚£†‚¢™‚£ø‚£ø‚£ø‚†ü‚¢°‚£æ‚£ø‚£ø‚£ø
#‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†ô‚†ø‚£∑‚£å‚†â‚†â‚¢Å‚£æ‚°ø‚†ü‚¢Å‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø
#‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢õ‚£∑‚£Ñ‚°à‚¢ô‚°ª‚†ø‚°ü‚†â‚£Ç‚£¥‚°õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø
#‚£ø‚£ø‚£ø‚£ø‚£ø‚°î‚°ø‚¢ü‚£õ‚°´‚†•‚¢à‚£ë‚°†‚†≠‚£õ‚°ª‚¢ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø
#‚£ø‚£Ñ‚£†‚£Ñ‚£†‚£Ü‚†©‚£Ω‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚°Æ‚¢Å‚£§‚£Ä‚£Ñ‚£Ñ‚£Ñ‚£ø
#‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ö‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
#‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")