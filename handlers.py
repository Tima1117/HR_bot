"""
–ë–æ—Ç
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
"""
import asyncio
import os
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.exceptions import TelegramBadRequest

from states import RegistrationStates, InterviewStates
from keyboards import get_start_keyboard, get_ready_for_interview_keyboard, get_quick_questions_keyboard
from mock_data import mock_db
from config import RESUMES_DIR, INTERVIEW_TIME_LIMIT, INTERVIEW_QUESTIONS_COUNT

router = Router()


# ==================== –ö–û–ú–ê–ù–î–´ ====================

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    await state.set_state(RegistrationStates.waiting_for_vacancy)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–±–æ—Ä–∞.\n\n"
        "üìã –î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ—Ç–∫–ª–∏–∫–∞–µ—Ç–µ—Å—å.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, HR-–º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Ç.–¥.):",
        parse_mode="HTML"
    )


@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    await state.clear()
    await message.answer(
        "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=get_start_keyboard()
    )


@router.message(Command("questions"))
async def cmd_questions(message: Message):
    """–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
    await message.answer(
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
        parse_mode="HTML",
        reply_markup=get_quick_questions_keyboard()
    )


# ==================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ====================

@router.message(RegistrationStates.waiting_for_vacancy)
async def process_vacancy(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    vacancy_name = message.text.strip()
    await state.update_data(vacancy_name=vacancy_name)
    await state.set_state(RegistrationStates.waiting_for_first_name)
    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞–∫–∞–Ω—Å–∏—è: <b>{vacancy_name}</b>\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–±–æ—Ä—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–ò–º—è</b>:",
        parse_mode="HTML"
    )


@router.message(RegistrationStates.waiting_for_first_name)
async def process_first_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    await state.update_data(first_name=message.text)
    await state.set_state(RegistrationStates.waiting_for_last_name)
    await message.answer(
        "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>–§–∞–º–∏–ª–∏—é</b>:",
        parse_mode="HTML"
    )


@router.message(RegistrationStates.waiting_for_last_name)
async def process_last_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏"""
    await state.update_data(last_name=message.text)
    await state.set_state(RegistrationStates.waiting_for_middle_name)
    await message.answer(
        "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–û—Ç—á–µ—Å—Ç–≤–æ</b> (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –Ω–µ—Ç):",
        parse_mode="HTML"
    )


@router.message(RegistrationStates.waiting_for_middle_name)
async def process_middle_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Å—Ç–≤–∞"""
    middle_name = None if message.text == "-" else message.text
    await state.update_data(middle_name=middle_name)
    await state.set_state(RegistrationStates.waiting_for_phone)
    await message.answer(
        "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567):",
        parse_mode="HTML"
    )


@router.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞
    await state.update_data(phone=message.text)
    await state.set_state(RegistrationStates.waiting_for_city)
    await message.answer(
        "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è</b>:",
        parse_mode="HTML"
    )


@router.message(RegistrationStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞"""
    await state.update_data(city=message.text)
    await state.set_state(RegistrationStates.waiting_for_resume)
    await message.answer(
        "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n"
        "üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ <b>—Ä–µ–∑—é–º–µ</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ DOCX:",
        parse_mode="HTML"
    )


@router.message(RegistrationStates.waiting_for_resume, F.document)
async def process_resume(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ"""
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if not (document.file_name.endswith('.pdf') or document.file_name.endswith('.docx')):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ DOCX"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª (–∑–∞–≥–ª—É—à–∫–∞, –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –≤ S3 –∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
    file_path = os.path.join(RESUMES_DIR, f"{message.from_user.id}_{document.file_name}")
    await message.bot.download(document, destination=file_path)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    user_data['resume_path'] = file_path
    user_data['user_id'] = message.from_user.id
    user_data['username'] = message.from_user.username
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" (–∑–∞–≥–ª—É—à–∫–∞)
    mock_db.save_candidate(message.from_user.id, user_data)
    
    await state.clear()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    try:
        await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã!\nüíº –í–∞–∫–∞–Ω—Å–∏—è: {user_data.get('vacancy_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
    except:
        pass
    
    try:
        await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—é–º–µ...")
    except:
        pass
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ (–∑–∞–≥–ª—É—à–∫–∞)
    await asyncio.sleep(1)
    screening_result = mock_db.get_screening_result(message.from_user.id)
    
    if screening_result['passed']:
        # –†–µ–∑—é–º–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
        try:
            await message.answer("üéâ –•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!")
        except:
            pass
        
        try:
            await message.answer(f"{screening_result['feedback']}")
        except:
            pass
        
        try:
            await message.answer(
                f"–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é!\n"
                f"–í–æ–ø—Ä–æ—Å–æ–≤: {INTERVIEW_QUESTIONS_COUNT}\n"
                f"–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: {INTERVIEW_TIME_LIMIT} —Å–µ–∫",
                reply_markup=get_ready_for_interview_keyboard()
            )
            await state.set_state(InterviewStates.waiting_for_start)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            try:
                await message.answer("–ì–æ—Ç–æ–≤—ã –∫ –∏–Ω—Ç–µ—Ä–≤—å—é? –ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞'")
                await state.set_state(InterviewStates.waiting_for_start)
            except:
                print("[ERROR] –ü–æ–ª–Ω—ã–π –æ—Ç–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        # –†–µ–∑—é–º–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É
        try:
            await message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é...")
        except:
            pass
        
        try:
            await message.answer(f"{screening_result['feedback']}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å!")
        except:
            pass


@router.message(RegistrationStates.waiting_for_resume)
async def wrong_resume_format(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–∑—é–º–µ"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ (PDF –∏–ª–∏ DOCX), –∞ –Ω–µ —Ç–µ–∫—Å—Ç.\n\n"
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É üìé"
    )


# ==================== –ò–ù–¢–ï–†–í–¨–Æ ====================

@router.callback_query(F.data == "start_interview", InterviewStates.waiting_for_start)
async def start_interview(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    await callback.answer()
    await start_interview_process(callback.message, state)


@router.message(F.text.lower().in_(["–¥–∞", "–≥–æ—Ç–æ–≤", "–≥–æ—Ç–æ–≤–∞", "–Ω–∞—á–∞—Ç—å"]), InterviewStates.waiting_for_start)
async def start_interview_text(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–Ω–æ–ø–∫–µ)"""
    await start_interview_process(message, state)


async def start_interview_process(message: Message, state: FSMContext):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" (–∑–∞–≥–ª—É—à–∫–∞)
    questions = mock_db.get_interview_questions()
    
    await state.update_data(
        questions=questions,
        current_question=0,
        answers=[]
    )
    
    try:
        await message.answer("üéØ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é!")
    except:
        pass
    
    try:
        await message.answer("–û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.")
    except:
        pass
    
    await asyncio.sleep(1)
    await ask_question(message, state)


@router.callback_query(F.data == "not_ready", InterviewStates.waiting_for_start)
async def not_ready_for_interview(callback: CallbackQuery, state: FSMContext):
    """–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    await callback.answer()
    await state.clear()
    await callback.message.edit_text(
        "üëå –•–æ—Ä–æ—à–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–∑–∂–µ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."
    )


async def ask_question(message: Message, state: FSMContext):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()
    questions = data['questions']
    current_q = data['current_question']
    
    if current_q >= len(questions):
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã
        await finish_interview(message, state)
        return
    
    await state.set_state(InterviewStates.answering_question)
    
    question_msg = await message.answer(
        f"‚ùì <b>–í–æ–ø—Ä–æ—Å {current_q + 1} –∏–∑ {len(questions)}:</b>\n\n"
        f"{questions[current_q]}\n\n"
        f"‚è± –£ –≤–∞—Å {INTERVIEW_TIME_LIMIT} —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç.",
        parse_mode="HTML"
    )
    
    await state.update_data(question_time=asyncio.get_event_loop().time())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    asyncio.create_task(question_timer(message, state, question_msg.message_id))


async def question_timer(message: Message, state: FSMContext, question_msg_id: int):
    """–¢–∞–π–º–µ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
    await asyncio.sleep(INTERVIEW_TIME_LIMIT)
    
    current_state = await state.get_state()
    if current_state == InterviewStates.answering_question:
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
        if len(data.get('answers', [])) == data['current_question']:
            # –í—Ä–µ–º—è –≤—ã—à–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å
            await state.update_data(
                answers=data.get('answers', []) + ["[–ü–†–û–ü–£–©–ï–ù]"],
                current_question=data['current_question'] + 1
            )
            
            mock_db.save_interview_answer(
                message.from_user.id,
                data['current_question'],
                "[–ü–†–û–ü–£–©–ï–ù - –≤—Ä–µ–º—è –≤—ã—à–ª–æ]"
            )
            
            await message.answer(
                "‚è∞ <b>–í—Ä–µ–º—è –≤—ã—à–ª–æ!</b>\n\n"
                "–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É...",
                parse_mode="HTML"
            )
            
            await asyncio.sleep(2)
            await ask_question(message, state)


@router.message(InterviewStates.answering_question)
async def process_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
    elapsed = asyncio.get_event_loop().time() - data.get('question_time', 0)
    
    if elapsed > INTERVIEW_TIME_LIMIT:
        await message.answer(
            "‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –∏—Å—Ç–µ–∫–ª–æ.\n"
            "–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–µ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers = data.get('answers', [])
    answers.append(message.text)
    current_q = data['current_question']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" (–∑–∞–≥–ª—É—à–∫–∞)
    mock_db.save_interview_answer(message.from_user.id, current_q, message.text)
    
    await state.update_data(
        answers=answers,
        current_question=current_q + 1
    )
    
    await message.answer(
        "‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!",
        parse_mode="HTML"
    )
    
    await asyncio.sleep(1)
    await ask_question(message, state)


async def finish_interview(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ —É–∂–µ –∏–Ω—Ç–µ—Ä–≤—å—é (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    current_state = await state.get_state()
    if current_state == InterviewStates.interview_completed or current_state is None:
        return  # –ò–Ω—Ç–µ—Ä–≤—å—é —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
    
    await state.set_state(InterviewStates.interview_completed)
    
    data = await state.get_data()
    answers = data.get('answers', [])
    answered = sum(1 for a in answers if a != "[–ü–†–û–ü–£–©–ï–ù]")
    
    await message.answer(
        f"üéä <b>–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(data['questions'])}\n"
        f"‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {answered}\n"
        f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(answers) - answered}\n\n"
        f"‚úÖ –í—Å–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑.\n\n"
        f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏...",
        parse_mode="HTML"
    )
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∞–Ω–∞–ª–∏–∑–∞
    await asyncio.sleep(4)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ—Ä–≤—å—é (–∑–∞–≥–ª—É—à–∫–∞)
    interview_result = mock_db.get_interview_result(message.from_user.id)
    
    if interview_result['passed']:
        # –ü—Ä–æ—à–µ–ª –∏–Ω—Ç–µ—Ä–≤—å—é
        await message.answer(
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            f"{interview_result['feedback']}\n\n"
            f"üìß –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à HR-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!",
            parse_mode="HTML"
        )
    else:
        # –ù–µ –ø—Ä–æ—à–µ–ª –∏–Ω—Ç–µ—Ä–≤—å—é
        await message.answer(
            f"üòî <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é</b>\n\n"
            f"{interview_result['feedback']}\n\n"
            f"–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.\n"
            f"–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –≤ –∫–∞—Ä—å–µ—Ä–µ!",
            parse_mode="HTML"
        )
    
    await state.clear()


# ==================== –ë–´–°–¢–†–´–ï –í–û–ü–†–û–°–´ ====================

@router.callback_query(F.data == "q_status")
async def answer_status(callback: CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Å—Ç–∞—Ç—É—Å–µ"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" (–∑–∞–≥–ª—É—à–∫–∞)
    status_data = mock_db.get_candidate_status(callback.from_user.id)
    
    await callback.message.answer(
        f"üìä <b>–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>\n\n"
        f"üîπ {status_data['text']}\n\n"
        f"{status_data['description']}\n\n"
        f"–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö!",
        parse_mode="HTML"
    )


@router.callback_query(F.data == "q_timing")
async def answer_timing(callback: CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Å—Ä–æ–∫–∞—Ö"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–∞—Ö (–∑–∞–≥–ª—É—à–∫–∞)
    timing_info = mock_db.get_timing_info()
    
    await callback.message.answer(
        timing_info,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "q_contact")
async def answer_contact(callback: CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∑–∞–≥–ª—É—à–∫–∞)
    contact_info = mock_db.get_contact_info()
    
    await callback.message.answer(
        contact_info,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "q_close")
async def close_questions(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤"""
    await callback.answer("–ó–∞–∫—Ä—ã—Ç–æ")
    try:
        await callback.message.delete()
    except:
        await callback.message.edit_text(
            "–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /questions —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞."
        )

