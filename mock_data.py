"""
–ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –±—ç–∫–µ–Ω–¥–∞
–í –±—É–¥—É—â–µ–º —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API-–∑–∞–ø—Ä–æ—Å—ã –∫ Go –±—ç–∫–µ–Ω–¥—É
"""
import random


class MockDatabase:
    """–ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.candidates = {}
        self.interview_results = {}
    
    def save_candidate(self, user_id: int, data: dict) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        –í –±—É–¥—É—â–µ–º: POST –∑–∞–ø—Ä–æ—Å –∫ Go API endpoint /api/candidates
        """
        self.candidates[user_id] = data
        vacancy = data.get('vacancy_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        print(f"[MOCK DB] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {user_id} –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é '{vacancy}': {data}")
        return True
    
    def get_screening_result(self, user_id: int) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ —Ä–µ–∑—é–º–µ
        –í –±—É–¥—É—â–µ–º: GET –∑–∞–ø—Ä–æ—Å –∫ Go API endpoint /api/screening/{user_id}
        """
        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ - —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        passed = random.choice([True, False])
        print(f"[MOCK SCREENING] –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {user_id}: {'–ü—Ä–æ—à–µ–ª' if passed else '–ù–µ –ø—Ä–æ—à–µ–ª'}")
        return {
            'passed': passed,
            'score': random.randint(60, 95) if passed else random.randint(30, 59),
            'feedback': '–í–∞—à–µ —Ä–µ–∑—é–º–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏' if passed else '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –æ–ø—ã—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º'
        }
    
    def get_interview_questions(self, vacancy_name: str = None) -> list:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏
        –í –±—É–¥—É—â–µ–º: GET –∑–∞–ø—Ä–æ—Å –∫ Go API endpoint /api/vacancies/{vacancy_id}/questions
        """
        questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏",
            "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–µ?",
            "–û–ø–∏—à–∏—Ç–µ —Å–∞–º—É—é —Å–ª–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å —Ä–µ—à–∞—Ç—å",
            "–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?",
            "–ö–∞–∫–∏–µ –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã?"
        ]
        print(f"[MOCK DB] –ü–æ–ª—É—á–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ '{vacancy_name}'")
        return questions
    
    def save_interview_answer(self, user_id: int, question_num: int, answer: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤—å—é
        –í –±—É–¥—É—â–µ–º: POST –∑–∞–ø—Ä–æ—Å –∫ Go API endpoint /api/interview/answers
        """
        if user_id not in self.interview_results:
            self.interview_results[user_id] = {}
        
        self.interview_results[user_id][question_num] = answer
        print(f"[MOCK DB] –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç {question_num} –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {user_id}")
        return True
    
    def get_interview_result(self, user_id: int) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ—Ä–≤—å—é
        –í –±—É–¥—É—â–µ–º: GET –∑–∞–ø—Ä–æ—Å –∫ Go API endpoint /api/interview/{user_id}/result
        """
        # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–æ–≤ - —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        passed = random.choice([True, True, False])  # 66% —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
        print(f"[MOCK INTERVIEW] –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è {user_id}: {'–ü—Ä–æ—à–µ–ª' if passed else '–ù–µ –ø—Ä–æ—à–µ–ª'}")
        return {
            'passed': passed,
            'score': random.randint(70, 100) if passed else random.randint(40, 69),
            'feedback': '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø' if passed else '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏–Ω—Ç–µ—Ä–≤—å—é –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–±–æ—Ä–∞'
        }
    
    def get_candidate_status(self, user_id: int) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        –í –±—É–¥—É—â–µ–º: GET –∑–∞–ø—Ä–æ—Å –∫ Go API endpoint /api/candidates/{user_id}/status
        """
        statuses = [
            {'status': 'new', 'text': '–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç', 'description': '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞'},
            {'status': 'resume_review', 'text': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—é–º–µ', 'description': '–í–∞—à–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É'},
            {'status': 'interview_pending', 'text': '–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é', 'description': '–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –≤–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä–≤—å—é'},
            {'status': 'interview_completed', 'text': '–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'description': '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã'},
            {'status': 'hr_review', 'text': '–ü—Ä–æ–≤–µ—Ä–∫–∞ HR', 'description': 'HR-–º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É'},
            {'status': 'approved', 'text': '–û–¥–æ–±—Ä–µ–Ω–æ', 'description': '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è HR'},
        ]
        
        # –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏
        status_data = random.choice(statuses)
        print(f"[MOCK DB] –°—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {user_id}: {status_data['status']}")
        return status_data
    
    def get_timing_info(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–∞—Ö
        –í –±—É–¥—É—â–µ–º: –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ API
        """
        return (
            "‚è∞ <b>–ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ä–æ–∫–∏:</b>\n\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—é–º–µ: 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é: 2-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è\n"
            "‚Ä¢ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ HR: 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n\n"
            "–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞."
        )
    
    def get_contact_info(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        –í –±—É–¥—É—â–µ–º: –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ API
        """
        return (
            "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
            "‚Ä¢ Email: hr@company.com\n"
            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67\n"
            "‚Ä¢ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: –ü–Ω-–ü—Ç, 9:00-18:00 (–ú–°–ö)\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –Ω–∞ email –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è."
        )

#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚†Ä‚†Ä‚¢Ä‚¢ê‚†Ä‚£¨‚°Ñ‚†Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚£∂‚£¥‚£ø‚£∑‚°ø‚°ø‚¢∑‚£¶‚£•‚°Ñ‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ñ‚£¥‚†ã‚¢©‚£ø‚†ª‚£∑‚†Ä‚†Ä‚†â‚†ª‚£ø‚£Ü‚£†‚£∂‚°∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚¢â‚†Ä‚¢∏‚°ü‚†Ä‚¢π‚£∑‚°Ñ‚£†‚£¥‚£ø‚£ø‚¢´‚†ò‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚£ø‚°∑‚¢Ä‚£¥‚£ø‚£ø‚£ü‚†â‚†ê‚£ª‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚£ø‚°á‚°á‚£∏‚£ø‚£∑‚¢ü‚†ã‚†Å‚†ô‚¢ø‚£ß‚£Ä‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£≠‚£ø‚£ø‚£ø‚£æ‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚£∑‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚†ø‚†ã‚†Å‚¢ü‚£ø‚£ø‚£§‚£¶‚°†‚£Ä‚£¥‚£∂‚°ü‚£ª‚¢ø‚£æ‚°á‚†Ñ‚††‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†ê‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†à‚£ø‚°Ø‚†ü‚†ü‚†õ‚°ø‚†ã‚†Å‚†Ñ‚¢∏‚†Ä‚†π‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢®‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†á‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†ò‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚¢∞‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π API –∫–ª–∏–µ–Ω—Ç)
mock_db = MockDatabase()

